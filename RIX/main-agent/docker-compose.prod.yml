# RIX Main Agent - Phase 6: Production Docker Compose Configuration
# Production-ready deployment for N8N workflow management with monitoring and scaling

version: '3.8'

services:
  # RIX Main Agent - Production Configuration
  main-agent:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - "8001:8001"
      - "8002:8002"  # Prometheus metrics
    environment:
      # Application
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8001
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - WORKER_PROCESSES=2
      - WORKER_CONNECTIONS=1000
      
      # Database (PostgreSQL with connection pooling)
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      
      # Security & JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      
      # N8N Integration (Production)
      - N8N_BASE_URL=${N8N_BASE_URL}
      - N8N_API_KEY=${N8N_API_KEY}
      - N8N_JWT_TOKEN=${N8N_JWT_TOKEN}
      - N8N_WEBHOOK_SECRET=${N8N_WEBHOOK_SECRET}
      - N8N_WORKFLOW_TIMEOUT=300
      - N8N_MAX_CONCURRENT_EXECUTIONS=50
      - N8N_RETRY_ATTEMPTS=3
      
      # MCP Endpoints (Production)
      - MCP_TASK_ENDPOINT=/mcp/task-management
      - MCP_CALENDAR_ENDPOINT=/mcp/calendar-intelligence
      - MCP_BRIEFING_ENDPOINT=/mcp/briefing-generator
      - MCP_CHAT_ENDPOINT=/mcp/general-conversation
      - MCP_NEWS_ENDPOINT=/mcp/news-intelligence
      - MCP_VOICE_ENDPOINT=/mcp/voice-processing
      - MCP_ANALYTICS_ENDPOINT=/mcp/analytics-learning
      - MCP_NOTIFICATIONS_ENDPOINT=/mcp/notification-management
      - MCP_PROJECT_ENDPOINT=/mcp/project-chatbot
      - MCP_ROUTINE_COACHING_ENDPOINT=/mcp/routine-coaching
      - MCP_PROJECT_INTELLIGENCE_ENDPOINT=/mcp/project-intelligence
      - MCP_CALENDAR_OPTIMIZATION_ENDPOINT=/mcp/calendar-optimization
      
      # Performance & Scaling
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      - WEBSOCKET_MAX_CONNECTIONS=10000
      
      # Cache (Redis)
      - REDIS_URL=redis://redis:6379/0
      - REDIS_MAX_CONNECTIONS=50
      - REDIS_CACHE_TTL=3600
      
      # Monitoring
      - PROMETHEUS_METRICS_ENABLED=true
      - PROMETHEUS_METRICS_PORT=8002
      - WORKFLOW_ANALYTICS_ENABLED=true
      - WORKFLOW_PERFORMANCE_MONITORING=true
      
      # CORS and Security (Production)
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - workflow_logs:/app/logs
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health/ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL - Production Configuration
  postgres:
    image: postgres:14
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Production Configuration
  redis:
    image: redis:7-alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rix-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana - Dashboard
  grafana:
    image: grafana/grafana:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - prometheus

  # Nginx - Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - rix-network
    restart: unless-stopped
    depends_on:
      - main-agent
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  workflow_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  rix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.rix.environment=production"
      - "com.rix.phase=6"
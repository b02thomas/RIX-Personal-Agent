# RIX Main Agent - Phase 6: N8N Workflow Management
# Enhanced Docker Compose for comprehensive workflow execution and analytics
version: '3.8'

services:
  main-agent:
    build: .
    ports:
      - "8001:8001"
    environment:
      # Application
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=8001
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Database (PostgreSQL with workflow tables)
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=rix_personal_agent
      
      # Security & JWT
      - JWT_SECRET=your-development-jwt-secret-here
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      
      # N8N Integration (Phase 6 Enhanced)
      - N8N_BASE_URL=https://n8n.smb-ai-solution.com
      - N8N_API_KEY=${N8N_API_KEY:-}
      - N8N_JWT_TOKEN=${N8N_JWT_TOKEN:-}
      - N8N_WEBHOOK_SECRET=${N8N_WEBHOOK_SECRET:-}
      
      # MCP Endpoints (Model Context Protocol)
      - MCP_TASK_ENDPOINT=/mcp/task-management
      - MCP_CALENDAR_ENDPOINT=/mcp/calendar-intelligence
      - MCP_BRIEFING_ENDPOINT=/mcp/briefing-generator
      - MCP_CHAT_ENDPOINT=/mcp/general-conversation
      - MCP_NEWS_ENDPOINT=/mcp/news-intelligence
      - MCP_VOICE_ENDPOINT=/mcp/voice-processing
      - MCP_ANALYTICS_ENDPOINT=/mcp/analytics-learning
      - MCP_NOTIFICATIONS_ENDPOINT=/mcp/notification-management
      - MCP_PROJECT_ENDPOINT=/mcp/project-chatbot
      
      # Phase 5 Intelligence Features
      - MCP_ROUTINE_COACHING_ENDPOINT=/mcp/routine-coaching
      - MCP_PROJECT_INTELLIGENCE_ENDPOINT=/mcp/project-intelligence
      - MCP_CALENDAR_OPTIMIZATION_ENDPOINT=/mcp/calendar-optimization
      
      # Rate Limiting & Performance
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      
      # CORS and Security
      - ALLOWED_ORIGINS=["http://localhost:3000", "https://localhost:3000", "http://localhost:8001"]
      - ALLOWED_HOSTS=["localhost", "127.0.0.1", "0.0.0.0"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - workflow_logs:/app/logs
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health/ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL with pgvector for workflow analytics
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=rix_personal_agent
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rix_personal_agent"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: redis-server --appendonly yes
  
  # Prometheus for monitoring workflow metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rix-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  workflow_logs:
    driver: local

networks:
  rix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
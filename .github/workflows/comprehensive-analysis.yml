# Comprehensive Code Analysis Workflow
# Multi-language linting, security scanning, and dependency checking
name: Comprehensive Code Analysis

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Python Analysis Job
  python-analysis:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pylint mypy pip-audit black isort bandit safety
        # Install project dependencies from multiple locations
        find . -name "requirements.txt" -exec pip install -r {} \;

    - name: Code formatting check with Black
      run: |
        echo "Checking Python code formatting..."
        black --check --diff --color .
      continue-on-error: true

    - name: Import sorting check with isort
      run: |
        echo "Checking import organization..."
        isort --check-only --diff --color .
      continue-on-error: true

    - name: Lint with flake8 (Syntax Errors)
      run: |
        echo "Checking for Python syntax errors and undefined names..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=node_modules,venv,.venv

    - name: Lint with flake8 (Style Issues)
      run: |
        echo "Checking Python style issues..."
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=node_modules,venv,.venv
      continue-on-error: true

    - name: Advanced linting with Pylint
      run: |
        echo "Running Pylint analysis..."
        find . -name "*.py" -not -path "./node_modules/*" -not -path "./venv/*" -not -path "./.venv/*" | xargs pylint --exit-zero --reports=y --output-format=colorized
      continue-on-error: true

    - name: Type checking with mypy
      run: |
        echo "Running mypy type checking..."
        mypy . --ignore-missing-imports --show-error-codes --pretty --exclude node_modules --exclude venv --exclude .venv
      continue-on-error: true

    - name: Security scanning with Bandit
      run: |
        echo "Running security scan with Bandit..."
        bandit -r . -f json -o bandit-report.json --exclude ./node_modules,./venv,./.venv || true
        bandit -r . --exclude ./node_modules,./venv,./.venv
      continue-on-error: true

    - name: Dependency security audit with pip-audit
      run: |
        echo "Scanning Python dependencies for vulnerabilities..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
      continue-on-error: true

    - name: Dependency security check with Safety
      run: |
        echo "Additional dependency security check with Safety..."
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true

    - name: Run Python tests
      run: |
        echo "Running Python tests..."
        python -m pytest --verbose --tb=short
      continue-on-error: true

    - name: Upload Python analysis artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-analysis-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          pip-audit-report.json
          safety-report.json

  # JavaScript/TypeScript Analysis Job
  javascript-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install Node.js dependencies
      run: |
        # Install dependencies from all package.json files
        find . -name "package.json" -not -path "./node_modules/*" -execdir npm ci \;

    - name: ESLint Analysis
      run: |
        echo "Running ESLint analysis..."
        cd RIX
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json || true
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=stylish
      continue-on-error: true

    - name: TypeScript Type Checking
      run: |
        echo "Running TypeScript type checking..."
        cd RIX
        npm run type-check
      continue-on-error: true

    - name: Run JavaScript/TypeScript tests
      run: |
        echo "Running frontend tests..."
        cd RIX
        npm run test:ci
      continue-on-error: true

    - name: Build check
      run: |
        echo "Testing build process..."
        cd RIX
        npm run build
      continue-on-error: true

    - name: Upload JavaScript analysis artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: javascript-analysis-reports
        path: |
          RIX/eslint-report.json

  # Super-Linter Job (Multi-language)
  super-linter:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Super-Linter Analysis
      uses: github/super-linter/slim@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: true
        VALIDATE_PYTHON_BLACK: true
        VALIDATE_PYTHON_PYLINT: true
        VALIDATE_PYTHON_MYPY: true
        VALIDATE_TYPESCRIPT_ES: true
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_JSON: true
        VALIDATE_YAML: true
        VALIDATE_MARKDOWN: true
        VALIDATE_DOCKERFILE_HADOLINT: true
        VALIDATE_BASH: true
        PYTHON_BLACK_CONFIG_FILE: pyproject.toml
        PYTHON_PYLINT_CONFIG_FILE: .pylintrc
        TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.json
        JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
        LINTER_RULES_PATH: .github/linters
        SUPPRESS_POSSUM: true
      continue-on-error: true

  # Security and Dependency Analysis
  security-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
      continue-on-error: true

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      continue-on-error: true

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      continue-on-error: true

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Dependency Check Job
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        pip install pip-audit safety
        find . -name "requirements.txt" -exec pip install -r {} \;

    - name: Install Node.js dependencies
      run: |
        find . -name "package.json" -not -path "./node_modules/*" -execdir npm ci \;

    - name: Check for known vulnerabilities (Python)
      run: |
        echo "Checking Python dependencies for vulnerabilities..."
        pip-audit --format=json --output=python-vulnerabilities.json || true
        safety check --json --output=python-safety.json || true

    - name: Check for known vulnerabilities (Node.js)
      run: |
        echo "Checking Node.js dependencies for vulnerabilities..."
        cd RIX
        npm audit --audit-level=moderate --json > ../nodejs-vulnerabilities.json || true
        npm audit --audit-level=moderate

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-reports
        path: |
          python-vulnerabilities.json
          python-safety.json
          nodejs-vulnerabilities.json

  # Summary Job
  analysis-summary:
    runs-on: ubuntu-latest
    needs: [python-analysis, javascript-analysis, super-linter, security-analysis, dependency-check]
    if: always()

    steps:
    - name: Analysis Summary
      run: |
        echo "## 🔍 Comprehensive Code Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Analysis Results:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Python Analysis: ${{ needs.python-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ JavaScript/TypeScript Analysis: ${{ needs.javascript-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Super-Linter: ${{ needs.super-linter.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Analysis: ${{ needs.security-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency Check: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Check the individual job logs and artifacts for detailed results." >> $GITHUB_STEP_SUMMARY